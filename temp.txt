<div class="video-container" style="position: absolute; transform: translate(-50%, -50%); transition: opacity 0.5s ease-out 0s; opacity: 1; visibility: visible; pointer-events: none; top: 551.609px; left: 307.875px; width: 420.121px; height: 236.318px;">
   <video preload="metadata" playsinline="" webkit-playsinline="" src="static/video.mp4" style="width: 100%; height: auto;"></video>
   <img src="images/btn_replay.svg" draggable="false" style="position: absolute; top: 50%; left: 50%; width: 25%; height: auto; transform: translate(-50%, -50%); visibility: hidden; cursor: pointer; pointer-events: auto;">
   <img src="images/btn_sound_on.svg" draggable="false" style="position: absolute; top: 3%; right: 2%; width: 10%; max-width: 80px; height: auto; display: block; cursor: pointer; pointer-events: auto;">
   <img src="images/btn_sound_off.svg" draggable="false" style="position: absolute; top: 3%; right: 2%; width: 10%; max-width: 80px; height: auto; display: none; cursor: pointer; pointer-events: auto;">
</div>
// // Render Popup
// const showPopUp = (i,currentScene,dropZone) => {
//     const popUp = this.add.image(gameWidth/2, gameHeight/2, `popup${i}`);
//     popUp.setScale(0);
//     popUp.setPosition(dropZone.x,dropZone.y)
//     let scaleUp = 0;
//     gameWidth < 600 ? scaleUp = 0.5 : scaleUp = 0.8 
//     tween = currentScene.tweens.add({
//         targets: popUp,
//         scale: {
//             from: 0,
//             to: scaleUp,
//         },
//         x: gameWidth/2,
//         y: gameHeight/2,
//         duration: 500,
//         ease: 'Linear'
//     });

//     const closeButton = this.add.image(100, 100, 'closePopup').setInteractive();
//     let scaleCloseBtnUp = 0;
//     gameWidth < 600 ? scaleCloseBtnUp = 0.5 : scaleCloseBtnUp = 1 
//     closeButton.setScale(scaleCloseBtnUp)

//     var pw = gameWidth/2 + (popUp.width/2)*scaleUp - (closeButton.width/2)*scaleCloseBtnUp - (popUp.width/10)*scaleUp;
//     var ph = gameHeight/2 - (popUp.height/3)*scaleUp;

//     closeButton.setScale(0)
//     tween = currentScene.tweens.add({
//         targets: closeButton,
//         delay: 500,
//         scale: {
//             from: 0,
//             to: scaleCloseBtnUp+0.1,
//         },
//         duration: 1,
//         ease: 'Linear'
//     });

//     closeButton.setPosition(pw,ph)
//     closeButton.on('pointerdown', function(){
//         tween = currentScene.tweens.add({
//             targets: popUp,
//             scale: {
//                 from: scaleUp,
//                 to: 0,
//             },
//             x: dropZone.x,
//             y: dropZone.y,
//             duration: 500,
//             ease: 'Linear'
//         });

//         if(TOTAL_SCORE === NUMBER_CHARACTER){
//             console.log("chatcc")
//             handleEndGame(this,"congraz",this,TOTAL_SCORE)
//         }

//         closeButton.destroy()
//     }, this)
// }


// events drag and drop
        // this.input.on('dragstart', function (pointer, gameObject) {
        //     this.children.bringToTop(gameObject);

        //     gameObject.setTexture(gameObject.texture.key+"New")
        //     if(gameWidth < 600){
        //         gameObject.setScale(0.6)
        //     }
        // }, this);

        // this.input.on('drag', function (pointer, gameObject, dragX, dragY) {
        //     gameObject.x = dragX;
        //     gameObject.y = dragY;
            
        // });

        // this.input.on('drop', function (pointer, gameObject, dropZone) {

        //     if(dropZone.texture.key == (gameObject.texture.key)){
        //         gameObject.x = dropZone.x;
        //         gameObject.y = dropZone.y;

        //         // clear
        //         dropZone.setScale(0)
        //         gameObject.disableInteractive()
        //         gameObject.setScale(0)

        //         // add total score
        //         TOTAL_SCORE++;

        //         // show popup infor
        //         showPopUp(parseInt((gameObject.texture.key).slice(9,-3)),this.scene,dropZone)
                
        //         return 0
        //     }else{
        //         gameObject.x = gameObject.input.dragStartX;
        //         gameObject.y = gameObject.input.dragStartY;
        //     }
        // });

        // this.input.on('dragend', function (pointer, gameObject, dropped) {

        //     if (!dropped)
        //     {
        //         gameObject.x = gameObject.input.dragStartX;
        //         gameObject.y = gameObject.input.dragStartY;
                
        //     }else{

        //     }

        //     const currentName = gameObject.texture.key;
        //     gameObject.setTexture(currentName.slice(0,-3))

        //     // console.log("TOTAL_SCORE",TOTAL_SCORE,"/ 9")
        // });

        // this.input.on('dragleave', function (pointer, gameObject, dropZone) {

        // });